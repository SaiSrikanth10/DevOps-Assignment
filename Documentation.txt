

C:\Windows\system32>aws ec2 create-vpc --cidr-block 10.0.0.0/24
{
    "Vpc": {
        "CidrBlock": "10.0.0.0/24",
        "DhcpOptionsId": "dopt-451cd13d",
        "State": "pending",
        "VpcId": "vpc-099a8941ea4ce3509",
        "OwnerId": "477814243768",
        "InstanceTenancy": "default",
        "Ipv6CidrBlockAssociationSet": [],
        "CidrBlockAssociationSet": [
            {
                "AssociationId": "vpc-cidr-assoc-09a63640142552210"
                "CidrBlock": "10.0.0.0/24",
                "CidrBlockState": {
                    "State": "associated"
                }
            }
        ],
        "IsDefault": false,
        "Tags": []
    }
}


C:\Windows\system32>aws ec2 create-subnet --vpc-id vpc-099a8941ea4c
block 10.0.0.0/25
{
    "Subnet": {
        "AvailabilityZone": "us-west-2c",
        "AvailabilityZoneId": "usw2-az3",
        "AvailableIpAddressCount": 123,
        "CidrBlock": "10.0.0.0/25",
        "DefaultForAz": false,
        "MapPublicIpOnLaunch": false,
        "State": "pending",
        "SubnetId": "subnet-0ac4124601a92deee",
        "VpcId": "vpc-099a8941ea4ce3509",
        "OwnerId": "477814243768",
        "AssignIpv6AddressOnCreation": false,
        "Ipv6CidrBlockAssociationSet": [],
        "SubnetArn": "arn:aws:ec2:us-west-2:477814243768:subnet/sub
1a92deee"
    }
}

C:\Windows\system32>aws ec2 create-internet-gateway
{
    "InternetGateway": {
        "Attachments": [],
        "InternetGatewayId": "igw-0c17f3cf0d641f8bd",
        "Tags": []
    }
}


C:\Windows\system32>aws ec2 attach-internet-gateway --internet-gateway-id igw-0c
17f3cf0d641f8bd --vpc-id vpc-099a8941ea4ce3509

C:\Windows\system32>aws ec2 create-route-table --vpc-id vpc-099a8941ea4ce3509
{
    "RouteTable": {
        "Associations": [],
        "PropagatingVgws": [],
        "RouteTableId": "rtb-06242a67fddd01bc5",
        "Routes": [
            {
                "DestinationCidrBlock": "10.0.0.0/24",
                "GatewayId": "local",
                "Origin": "CreateRouteTable",
                "State": "active"
            }
        ],
        "Tags": [],
        "VpcId": "vpc-099a8941ea4ce3509",
        "OwnerId": "477814243768"
    }
}


C:\Windows\system32>aws ec2 associate-route-table --route-table-id rtb-06242a67fddd01bc5 --subnet-id subnet-0ac4124601a92deee
{
    "AssociationId": "rtbassoc-0e1e095f6ec2cb365"
}


C:\Windows\system32>aws ec2 create-security-group --group-name Ec2-sg --vpc-id vpc-099a8941ea4ce3509 --description "Security group for Ec2 environment"
{
    "GroupId": "sg-03e72ab20030405c7"
}

Ubuntu Server 18.04 LTS (HVM), SSD Volume Type: ami-0f65671a86f061fcd


aws ec2 run-instances --image-id ami-0f65671a86f061fcd --subnet-id subnet-0ac4124601a92deee --security-group-ids sg-03e72ab20030405c7 --count 1 --instance-type t2.micro --key-name key-pair --query "Instances[0].InstanceId"

i-0da59d09d230f4baf

aws ec2 describe-instances --instance-ids i-0da59d09d230f4baf --query "Reservations[0].Instances[0].PublicIpAddress"


C:\Windows\system32>aws ec2 modify-subnet-attribute --subnet-id subnet-0ac412460
1a92deee --map-public-ip-on-launch

C:\Windows\system32>aws ec2 run-instances --image-id ami-0bbe6b35405ecebdb --sub
net-id subnet-0ac4124601a92deee --security-group-ids sg-03e72ab20030405c7 --coun
t 1 --instance-type t2.micro --key-name key-pair --query "Instances[0].InstanceI
d"
"i-05e55f1911e023498"

C:\Windows\system32>aws ec2 describe-instances --instance-ids i-05e55f1911e02349
8 --query "Reservations[0].Instances[0].PublicIpAddress"
"34.223.253.70"

----------------------------------- Chef Bootstrap -------------------

knife bootstrap 34.223.253.70 -x ubuntu -i .\key-pair.pem --sudo -N Assignment

knife upload .(To upload cookbooks in cookbooks directory)

----------------------------------- Docker ----------------------------
To generate this message, Docker took the following steps:
 1. The Docker client contacted the Docker daemon.
 2. The Docker daemon pulled the "hello-world" image from the Docker Hub.
    (amd64)
 3. The Docker daemon created a new container from that image which runs the
    executable that produces the output you are currently reading.
 4. The Docker daemon streamed that output to the Docker client, which sent it
    to your terminal.



https://github.com/SaiSrikanth10/DevOps-Assignment.git